import json
import os
from concurrent import futures
import ast
import numpy as np
import traceback
from model_pb2_grpc import *
import psycopg
import sql
import model_pb2_grpc
from psycopg import sql as pgsql
from model_pb2 import RecallRequest, RecallResponse, GetRatingResponse

"""
accompanied modules are generated by calling the following command

```
python3 -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. model.proto
```

"""

class RecwaveModelService(ModelServicer):
    def __init__(self):
        super(RecwaveModelService, self).__init__()
        self.conn = psycopg.connect("dbname=dev user=root host=127.0.0.1 port=4566")

    def Recall(self, request, context):
        userid = request.userid
        print(f"Recall request from {userid}")
        try:
            with self.conn.cursor() as cur:
                cur.execute(sql.RECALL_SQL % userid)
                results = cur.fetchall()
                print(results)
                if len(results) == 0:
                    # randomly pick 20 items
                    context.set_code(grpc.StatusCode.OK)
                    return RecallResponse(userid=userid,
                        count=0)
                else:
                    # if not, return the recalled items
                    context.set_code(grpc.StatusCode.OK)
                    print(f"Recall sorted keys for {userid}")
                    return RecallResponse(userid=userid,
                        count=int(results[0][0]))
        except Exception as e:
            print(traceback.format_exc())
            context.set_code(grpc.StatusCode.INTERNAL)
            context.set_details(e)
            return RecallResponse(userid=userid, count=0)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.conn.close()

    def serve(self):
        server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
        model_pb2_grpc.add_ModelServicer_to_server(
            self, server)
        server.add_insecure_port('[::]:8080')
        server.start()
        server.wait_for_termination()


if __name__ == '__main__':
    for i in range(1):
        print("making the", i, "th connection")

        conn = psycopg.connect("dbname=dev user=root host=127.0.0.1 port=4566")
        with conn.cursor() as cur:
            # the following code will panic
            # because placeholder is completely not supported
            # even varchar parsed to TypeOid 0, which isn't even defined
            cur.execute("select (2, %s);", ("2333333",))
            # cur.execute("select (2, $1);")
            results = cur.fetchall()
        print(results)

        conn.close()
